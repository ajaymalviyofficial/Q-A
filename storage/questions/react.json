[
    {
      "question": "What is React primarily used for?",
      "options": ["Database management", "User Interface development", "Server-side scripting", "Game development"],
      "answer": "User Interface development"
    },
    {
      "question": "What is a React component?",
      "options": ["A database table", "Reusable piece of UI", "A server API", "A browser extension"],
      "answer": "Reusable piece of UI"
    },
    {
      "question": "Which method is used to create a component in React?",
      "options": ["createComponent()", "makeComponent()", "React.createClass()", "React.component()"],
      "answer": "React.createClass()"
    },
    {
      "question": "What is JSX in React?",
      "options": ["JavaScript XML", "Java Syntax Extension", "JavaScript Extension", "JSON Syntax Extension"],
      "answer": "JavaScript XML"
    },
    {
      "question": "Which hook is used to manage state in functional components?",
      "options": ["useEffect", "useState", "useReducer", "useContext"],
      "answer": "useState"
    },
    {
      "question": "What is the virtual DOM?",
      "options": ["An API for the browser", "A lightweight copy of the actual DOM", "A new type of database", "An external library"],
      "answer": "A lightweight copy of the actual DOM"
    },
    {
      "question": "Which method is used to handle side effects in functional components?",
      "options": ["useContext", "useEffect", "useLayoutEffect", "useReducer"],
      "answer": "useEffect"
    },
    {
      "question": "React is maintained by which organization?",
      "options": ["Google", "Facebook", "Microsoft", "Twitter"],
      "answer": "Facebook"
    },
    {
      "question": "What is a prop in React?",
      "options": ["Internal state", "Componentâ€™s method", "Data passed to a component", "Style sheet"],
      "answer": "Data passed to a component"
    },
    {
      "question": "Which tool is used to create a new React app?",
      "options": ["React-CLI", "npm init", "create-react-app", "react-builder"],
      "answer": "create-react-app"
    },
    {
      "question": "What is the default port for React development server?",
      "options": ["3000", "8000", "5000", "8080"],
      "answer": "3000"
    },
    {
      "question": "Which of the following is true about keys in React?",
      "options": ["Keys should be unique", "Keys are required for conditional rendering", "Keys must be strings", "Keys are only used in class components"],
      "answer": "Keys should be unique"
    },
    {
      "question": "What is a higher-order component (HOC)?",
      "options": ["A React component with more props", "A component that renders a higher layer", "A function that returns a component", "An API method"],
      "answer": "A function that returns a component"
    },
    {
      "question": "What does useEffect replace from class components?",
      "options": ["componentDidMount", "render", "shouldComponentUpdate", "componentWillUnmount"],
      "answer": "componentDidMount"
    },
    {
      "question": "Which hook is used for context in React?",
      "options": ["useReducer", "useEffect", "useContext", "useState"],
      "answer": "useContext"
    },
    {
      "question": "How do you lift state up in React?",
      "options": ["Using props", "Using useState", "By moving state to a common ancestor", "Using Redux"],
      "answer": "By moving state to a common ancestor"
    },
    {
      "question": "Which of these is a correct way to pass props?",
      "options": ["<MyComp prop=value />", "<MyComp.prop = value />", "MyComp[prop] = value", "<MyComp :prop='value' />"],
      "answer": "<MyComp prop=value />"
    },
    {
      "question": "How can you prevent re-renders in React?",
      "options": ["Using shouldComponentUpdate or React.memo", "Using setState", "Using useEffect", "By disabling JSX"],
      "answer": "Using shouldComponentUpdate or React.memo"
    },
    {
      "question": "Which method is used to change state in class components?",
      "options": ["this.setState()", "this.updateState()", "this.state()", "this.set()"],
      "answer": "this.setState()"
    },
    {
      "question": "What does React.Fragment do?",
      "options": ["Creates a route", "Returns multiple elements without extra DOM nodes", "Defines state", "Connects to a database"],
      "answer": "Returns multiple elements without extra DOM nodes"
    }
  ]
  